#!/bin/bash

# Set up the Secret key used by Beaker and Flask
# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var
if grep -qE "beaker.session.secret ?= ?$" ckan.ini
then
    echo "Setting beaker.session.secret in ini file"
    ckan config-tool $CKAN_INI "beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')"
    ckan config-tool $CKAN_INI "WTF_CSRF_SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')"
    JWT_SECRET=$(python3 -c 'import secrets; print("string:" + secrets.token_urlsafe())')
    ckan config-tool $CKAN_INI "api_token.jwt.encode.secret=${JWT_SECRET}"
    ckan config-tool $CKAN_INI "api_token.jwt.decode.secret=${JWT_SECRET}"
fi

# Github Codespaces workaround. Check if WTF_CSRF_ENABLED is explicitly set to False and update CKAN_INI
if [ "$WTF_CSRF_ENABLED" = "False" ]; then
    echo "WTF_CSRF_ENABLED is set to False. Updating CKAN_INI."
    ckan config-tool $CKAN_INI "WTF_CSRF_ENABLED=False"
fi

# Update local (file://) licenses
if [ -n "$CKAN___LICENSES_GROUP_URL" ]; then
    ckan config-tool $CKAN_INI "licenses_group_url=${CKAN___LICENSES_GROUP_URL}"
    echo "Update licenses in CKAN"
fi

# Comment out smtp.* settings if CKAN__SMTP_ENABLED is not True
if [ "$CKAN__SMTP_ENABLED" != "True" ]; then
    echo "Commenting out smtp.* settings in ini file"
    sed -i 's/^\(smtp\..*\)$/#\1/' $CKAN_INI
fi

# Run the prerun script to init CKAN and create the default admin user
python3 prerun.py

# Run any startup scripts provided by images extending this one
if [[ -d "/docker-entrypoint.d" ]]
then
    for f in /docker-entrypoint.d/*; do
        case "$f" in
            *.sh)     echo "$0: Running init file $f"; . "$f" ;;
            *.py)     echo "$0: Running init file $f"; python3 "$f"; echo ;;
            *)        echo "$0: Ignoring $f (not an sh or py file)" ;;
        esac
        echo
    done
fi

# Create Harvester logs directory and change its ownership
mkdir -p $CKAN_LOGS_PATH/harvester
chown -R ckan:ckan $CKAN_LOGS_PATH/harvester

# Create xloader logs directory and change its ownership
mkdir -p $CKAN_LOGS_PATH/xloader
chown -R ckan:ckan $CKAN_LOGS_PATH/xloader

# Ensure CKAN has the correct permissions. Uncomment to avoid i18n/*js errors: https://github.com/ckan/ckanext-pages/issues/91
#chmod -R 777 /srv/app/src/ckan/ckan/public/base/i18n

# Set the common uwsgi options. 
## Add thunder-lock to prevent multiple workers from running the same job and buffer-size to prevent large headers
## To increase performance, you can adjust the number of processes (-p) (More info: https://uwsgi-docs.readthedocs.io/en/latest/Options.html & https://www.bloomberg.com/company/stories/configuring-uwsgi-production-deployment/)
# Fix uWSGI raises OSError: write error: https://stackoverflow.com/a/45393743
UWSGI_OPTS="--thunder-lock \
            --ignore-sigpipe \
            --ignore-write-errors \
            --disable-write-exception \
            --socket /tmp/uwsgi.sock \
            --wsgi-file /srv/app/wsgi.py \
            --module wsgi:application \
            --uid 92 --gid 92 \
            --http [::]:5000 \
            --master \
            --enable-threads \
            --lazy-apps \
            --vacuum \
            --harakiri $UWSGI_HARAKIRI \
            --max-requests 500 \
            --max-worker-lifetime 3600 \
            --reload-on-rss 2048 \
            --processes 4 \
            --buffer-size 32768 \
            --disable-logging \
            --log-4xx \
            --log-5xx \
            --auto-procname \
            --procname-prefix 'ckan-'"

if [ $? -eq 0 ]
then
    # Start supervisord
    echo "[prerun.workers] Loading the CKAN workers with supervisord..."
    supervisord --configuration /etc/supervisord.conf &

    # Workers
    ## Add the harvester background processes to crontab if they do not already exist
    echo "[prerun.workers] Add harvester background procceses to crontab"
    if ! crontab -l | grep -q "/usr/bin/supervisorctl start ckan_harvester_run"; then
        { crontab -l; echo "*/15 * * * * /usr/bin/supervisorctl start ckan_harvester_run"; } | crontab -
    fi
    ## Clean-up mechanism for the harvest log table. 'ckan.harvest.log_timeframe'. The default time frame is 30 days
    if ! crontab -l | grep -q "/usr/bin/supervisorctl start ckan_harvester_clean_log"; then
        { crontab -l; echo "0 5 */30 * * /usr/bin/supervisorctl start ckan_harvester_clean_log"; } | crontab -
    fi

    ## Add SMTP notification process to crontab if CKAN__SMTP_ENABLED is True
    if [ "$CKAN__SMTP_ENABLED" = "True" ]; then
        echo "[prerun.workers] Add SMTP notification process to crontab"
        if ! crontab -l | grep -q "ckan -c $CKAN_INI notify send_emails"; then
            { crontab -l; echo "@hourly echo '{}' | ckan -c $CKAN_INI notify send_emails > /dev/null"; } | crontab -
        fi
    fi

    ## Execute cron in the background
    echo "[prerun.workers] Execute cron in the background"
    cron -f &

    # Start uwsgi
    uwsgi $UWSGI_OPTS
else
  echo "[prerun] failed...not starting CKAN."
fi
